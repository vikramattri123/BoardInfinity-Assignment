{"version":3,"sources":["../../../src/php/var/unserialize.js"],"names":["module","exports","unserialize","data","utf8Overhead","str","s","length","i","code","charCodeAt","readUntil","offset","stopchr","buf","chr","slice","Error","push","join","readChrs","_unserialize","dtype","dataoffset","keyandchrs","keys","contig","array","obj","readdata","readData","ccount","stringlength","key","kprops","kchrs","vprops","vchrs","value","chrs","typeconvert","x","parseInt","SyntaxError","parseFloat","Array","err","console","error"],"mappings":"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","file":"unserialize.js","sourcesContent":["module.exports = function unserialize (data) {\n  //  discuss at: https://locutus.io/php/unserialize/\n  // original by: Arpad Ray (mailto:arpad@php.net)\n  // improved by: Pedro Tainha (https://www.pedrotainha.com)\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: Kevin van Zonneveld (https://kvz.io)\n  // improved by: Chris\n  // improved by: James\n  // improved by: Le Torbi\n  // improved by: Eli Skeggs\n  // bugfixed by: dptr1988\n  // bugfixed by: Kevin van Zonneveld (https://kvz.io)\n  // bugfixed by: Brett Zamir (https://brett-zamir.me)\n  // bugfixed by: philippsimon (https://github.com/philippsimon/)\n  //  revised by: d3x\n  //    input by: Brett Zamir (https://brett-zamir.me)\n  //    input by: Martin (https://www.erlenwiese.de/)\n  //    input by: kilops\n  //    input by: Jaroslaw Czarniak\n  //    input by: lovasoa (https://github.com/lovasoa/)\n  // improved by: Rafał Kukawski\n  //      note 1: We feel the main purpose of this function should be\n  //      note 1: to ease the transport of data between php & js\n  //      note 1: Aiming for PHP-compatibility, we have to translate objects to arrays\n  //   example 1: unserialize('a:3:{i:0;s:5:\"Kevin\";i:1;s:3:\"van\";i:2;s:9:\"Zonneveld\";}')\n  //   returns 1: ['Kevin', 'van', 'Zonneveld']\n  //   example 2: unserialize('a:2:{s:9:\"firstName\";s:5:\"Kevin\";s:7:\"midName\";s:3:\"van\";}')\n  //   returns 2: {firstName: 'Kevin', midName: 'van'}\n  //   example 3: unserialize('a:3:{s:2:\"ü\";s:2:\"ü\";s:3:\"四\";s:3:\"四\";s:4:\"𠜎\";s:4:\"𠜎\";}')\n  //   returns 3: {'ü': 'ü', '四': '四', '𠜎': '𠜎'}\n  //   example 4: unserialize(undefined)\n  //   returns 4: false\n  //   example 5: unserialize('O:8:\"stdClass\":1:{s:3:\"foo\";b:1;}')\n  //   returns 5: { foo: true }\n\n  var utf8Overhead = function (str) {\n    var s = str.length\n    for (var i = str.length - 1; i >= 0; i--) {\n      var code = str.charCodeAt(i)\n      if (code > 0x7f && code <= 0x7ff) {\n        s++\n      } else if (code > 0x7ff && code <= 0xffff) {\n        s += 2\n      }\n      // trail surrogate\n      if (code >= 0xDC00 && code <= 0xDFFF) {\n        i--\n      }\n    }\n    return s - 1\n  }\n  var readUntil = function (data, offset, stopchr) {\n    var i = 2\n    var buf = []\n    var chr = data.slice(offset, offset + 1)\n\n    while (chr !== stopchr) {\n      if ((i + offset) > data.length) {\n        throw Error('Invalid')\n      }\n      buf.push(chr)\n      chr = data.slice(offset + (i - 1), offset + i)\n      i += 1\n    }\n    return [buf.length, buf.join('')]\n  }\n  var readChrs = function (data, offset, length) {\n    var i, chr, buf\n\n    buf = []\n    for (i = 0; i < length; i++) {\n      chr = data.slice(offset + (i - 1), offset + i)\n      buf.push(chr)\n      length -= utf8Overhead(chr)\n    }\n    return [buf.length, buf.join('')]\n  }\n  function _unserialize (data, offset) {\n    var dtype\n    var dataoffset\n    var keyandchrs\n    var keys\n    var contig\n    var length\n    var array\n    var obj\n    var readdata\n    var readData\n    var ccount\n    var stringlength\n    var i\n    var key\n    var kprops\n    var kchrs\n    var vprops\n    var vchrs\n    var value\n    var chrs = 0\n    var typeconvert = function (x) {\n      return x\n    }\n\n    if (!offset) {\n      offset = 0\n    }\n    dtype = (data.slice(offset, offset + 1))\n\n    dataoffset = offset + 2\n\n    switch (dtype) {\n      case 'i':\n        typeconvert = function (x) {\n          return parseInt(x, 10)\n        }\n        readData = readUntil(data, dataoffset, ';')\n        chrs = readData[0]\n        readdata = readData[1]\n        dataoffset += chrs + 1\n        break\n      case 'b':\n        typeconvert = function (x) {\n          const value = parseInt(x, 10)\n\n          switch (value) {\n            case 0:\n              return false\n            case 1:\n              return true\n            default:\n              throw SyntaxError('Invalid boolean value')\n          }\n        }\n        readData = readUntil(data, dataoffset, ';')\n        chrs = readData[0]\n        readdata = readData[1]\n        dataoffset += chrs + 1\n        break\n      case 'd':\n        typeconvert = function (x) {\n          return parseFloat(x)\n        }\n        readData = readUntil(data, dataoffset, ';')\n        chrs = readData[0]\n        readdata = readData[1]\n        dataoffset += chrs + 1\n        break\n      case 'n':\n        readdata = null\n        break\n      case 's':\n        ccount = readUntil(data, dataoffset, ':')\n        chrs = ccount[0]\n        stringlength = ccount[1]\n        dataoffset += chrs + 2\n\n        readData = readChrs(data, dataoffset + 1, parseInt(stringlength, 10))\n        chrs = readData[0]\n        readdata = readData[1]\n        dataoffset += chrs + 2\n        if (chrs !== parseInt(stringlength, 10) && chrs !== readdata.length) {\n          throw SyntaxError('String length mismatch')\n        }\n        break\n      case 'a':\n        readdata = {}\n\n        keyandchrs = readUntil(data, dataoffset, ':')\n        chrs = keyandchrs[0]\n        keys = keyandchrs[1]\n        dataoffset += chrs + 2\n\n        length = parseInt(keys, 10)\n        contig = true\n\n        for (i = 0; i < length; i++) {\n          kprops = _unserialize(data, dataoffset)\n          kchrs = kprops[1]\n          key = kprops[2]\n          dataoffset += kchrs\n\n          vprops = _unserialize(data, dataoffset)\n          vchrs = vprops[1]\n          value = vprops[2]\n          dataoffset += vchrs\n\n          if (key !== i) {\n            contig = false\n          }\n\n          readdata[key] = value\n        }\n\n        if (contig) {\n          array = new Array(length)\n          for (i = 0; i < length; i++) {\n            array[i] = readdata[i]\n          }\n          readdata = array\n        }\n\n        dataoffset += 1\n        break\n      case 'O': {\n        // O:<class name length>:\"class name\":<prop count>:{<props and values>}\n        // O:8:\"stdClass\":2:{s:3:\"foo\";s:3:\"bar\";s:3:\"bar\";s:3:\"baz\";}\n        readData = readUntil(data, dataoffset, ':') // read class name length\n        dataoffset += readData[0] + 1\n        readData = readUntil(data, dataoffset, ':')\n\n        if (readData[1] !== '\"stdClass\"') {\n          throw Error('Unsupported object type: ' + readData[1])\n        }\n\n        dataoffset += readData[0] + 1 // skip \":\"\n        readData = readUntil(data, dataoffset, ':')\n        keys = parseInt(readData[1], 10)\n\n        dataoffset += readData[0] + 2 // skip \":{\"\n        obj = {}\n\n        for (i = 0; i < keys; i++) {\n          readData = _unserialize(data, dataoffset)\n          key = readData[2]\n          dataoffset += readData[1]\n\n          readData = _unserialize(data, dataoffset)\n          dataoffset += readData[1]\n          obj[key] = readData[2]\n        }\n\n        dataoffset += 1 // skip \"}\"\n        readdata = obj\n        break\n      }\n      default:\n        throw SyntaxError('Unknown / Unhandled data type(s): ' + dtype)\n    }\n    return [dtype, dataoffset - offset, typeconvert(readdata)]\n  }\n\n  try {\n    if (typeof data !== 'string') {\n      return false\n    }\n\n    return _unserialize(data, 0)[2]\n  } catch (err) {\n    console.error(err)\n    return false\n  }\n}\n"]}